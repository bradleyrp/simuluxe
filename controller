#!/usr/bin/python

import sys,os
import time
import copy
from simuluxe import *

helpstring = """
	
	SIMULUXE simulation analysis tools
	
	operation
	---------
	addpath <path> .........: add a parent directory for a collection of
	                          simulations to the local config file
	addconfig <file> .......: add another local (python) settings file to
	                          be called by the local config file
	                          (~/.simuluxe_config.py)
	report .................: list environment variables
	
	configuration
	-------------
	Paths and settings are loaded from `~/.simuluxe_config.py` which will
	be created by default when you run addpath or addconfig. This file
	sets the paths for simulation data (`datapaths`), extra configuration
	descriptions of the simulations in a dictionary (`simdict`), and a list
	of additional configuration files to load (`addconfig`).

	quickstart
	----------
	Here is my favorite command for starting from scratch. You add a data path which
	holds simulations according to the "keyword-vNUMBER/xDIGIT-stepname" naming scheme.
	Then the catalog function searches for all edr files and uses them to quickly set the 
	time stamps. The paths and timestamps are stored in simdict for later.
	
	make addpath DATA
	make catalog ~/worker/simuluxe-data/simdict.py edrtime
	
	You can also list available timestamps for a simulation named e.g. keyword-v001
	from the edr files using this command. The only available keyword is "membrane" since
	this is the primary use for this analysis. Using the keyword 'slices' instead will
	return all prepared time slices.
	
	make avail membrane-v509 membrane-v510
	make avail slices

	To make a time slice from these trajectory use the following command. After suppling the
	simulation name (the top-level directory) and the step directory, you must also provide
	the format of the trajectory and a start-end-step string to indicate the time slice.
	
	make timeslice membrane-v612-enthx1-12800 s5-sim xtc 1000-6000-100
		
	documentation
	-------------
	"""+'see: file:///'+os.getcwd()+'/docs/_build/html/index.html'
	
initconfig = """#!/usr/bin/python

	import os,sys
	
	#---SIMULUXE LOCAL CONFIG FILE
	
	#---datapaths is a list of directories to search for simulation data
	datapaths = []
	
	#---additional settings files to load
	setfiles = []
	
	#---blank dictionary for adding simulation descriptions
	simdict = {}
	
	#---location of the simuluxe execute scripts
	"""

#---FUNCTIONS
#-------------------------------------------------------------------------------------------------------------

def docs(mods=None):

	'''
	Regenerate the documentation using sphinx-apidoc and code in simuluxe/script-make-docs.sh
	'''

	if mods != None and (mods == 'clean' or 'clean' in mods): os.system('cd docs/;make clean')
	else: os.system('./simuluxe/script-make-docs.sh '+os.path.abspath('.'))
	
def init_local_config():
	
	'''
	Check for a local configuration in the home directory and make a blank one if absent.
	'''
	
	confpath = os.path.expanduser('~/.simuluxe_config.py')
	if not os.path.isfile(confpath):
		print 'config file is absent so we will create it now and append paths.'
		with open(os.path.expanduser('~/.simuluxe_config.py'),'w') as fp:
			fp.write(niceblock(initconfig,newlines=True))
			slwd = os.path.abspath(os.path.expanduser(os.getcwd()))
			fp.write("slwd = '"+slwd+"'\n")
			fp.write("sys.path.append(slwd)\n")
			fp.write('\n#---customize below\n')
		#---push these variables to globals for consistency with downstream programs that might check
		globals()['slwd'] = slwd
		globals()['datapaths'] = []
		globals()['setfiles'] = []
		globals()['simdict'] = {}
		return True
	else: return False

def addpath(pathdir):

	'''
	Add extra paths to simulation data to the local configuration.
	'''

	new = init_local_config()
	if type(pathdir) != list: pathdir = [pathdir]
	for n in pathdir:
		fullpath = os.path.abspath(os.path.expanduser(n))
		if ((not new and fullpath not in datapaths) or new) and os.path.isdir(fullpath):
			with open(os.path.expanduser('~/.simuluxe_config.py'),'a') as fp:
				fp.write("datapaths.append('"+fullpath+"')\n")

def addconfig(pathfile):

	'''
	Add extra configuration and settings files to the local configuration.
	'''
	
	new = init_local_config()
	if type(pathfile) != list: pathfile = [pathfile]
	for n in pathfile:
		fullpath = os.path.abspath(os.path.expanduser(n))
		if ((not new and fullpath not in setfiles) or new) and os.path.isfile(fullpath):
			with open(os.path.expanduser('~/.simuluxe_config.py'),'a') as fp:
				fp.write("setfiles.append('"+fullpath+"')\n")
			
def gitpush(comment):
	
	'''
	Push the repository to github. Development purposes only.
	'''
	
	os.system('./controller make_docs clean')
	print time.time()
	print comment
	time.strftime("%Y.%m.%d.%H%M",time.localtime())
	print "\n---pushing to github---\n"
	message = '"'+time.strftime("%Y.%m.%d.%H%M",time.localtime())+\
		' : '+(' '.join(comment)).strip(' ')+'"'
	print message
	print '\ndirectory size:' 
	os.system('du -h --max-depth=0')
	if confirm():
		print '\npushing'
		os.system('git add . --all')
		os.system('git commit -a -m '+str(message))
		os.system('git push')
		
def report():
	
	'''
	Prints the current configuration.
	'''
	
	init_local_config()
	print '\nSTATUS:'
	print '\nsimdict : holds metadata for your simulations'
	print 'simdict = '+str(simdict)
	print '\ndatapath : provides a parent directory where simulations can be found'
	print 'datapaths = '+str(datapaths)
	print '\nsetfiles : points to additional configuration files which may add to datapath and simdict'
	print 'setfiles = '+str(setfiles)
	
def catalog(arglist):

	'''
	Parse simulation data directories, load paths into a new configuration file, and check that it's in
	the config file.
	'''
	
	new = init_local_config()
	#---note that a target python settings file must always be the first argument
	if type(arglist) == list: infofile = arglist[0]
	spider = True if any([i in arglist for i in ['edrtime','trrtime','xtctime']]) else False
	infofile = os.path.abspath(os.path.expanduser(infofile))
	if os.path.isfile(infofile):
		print 'file exists but I will overwrite'
		if not confirm(): return
	simdict = findsims(spider=spider)
	with open(infofile,'w') as fp:
		fp.write('#!/usr/bin/env python\n\n')
		for key in simdict.keys():
			fp.write("simdict['"+key+"'] = \\\n")
			formstring = json.dumps(simdict[key],indent=4)
			for line in formstring.split('\n'):
				fp.write('    '+line+'\n')
			fp.write('\n')
	if new or infofile not in setfiles: addconfig(infofile)
	
def avail(simname,slices=False):
	
	'''
	List available time slices for a simulation according to its root name.
	'''
	
	if type(simname) != list: simname = [simname]
	if simname == []: simname = simdict.keys()
	if slices:
		#---specifically list the prepared slices
		for sn in simname:
			if 'steps' in simdict[sn].keys():
				for step in simdict[sn]['steps']:
					if 'trajs' in step.keys():
						for traj in step['trajs']:
							print sn.ljust(30,'.')+step['dir'].ljust(20,'.')+traj.ljust(30)
	else:
		#---list slices according to time slices
		for sn in simname:
			for step in [s for s in simdict[sn]['steps'] if 'parts' in s.keys()]:
				for part in step['parts']:
					if 'edrstamp' in part and 'trr' in part:
						ts = part['edrstamp'].split('-')
						print sn.ljust(40,'.')+step['dir'].ljust(30,'.')+part['edr'].ljust(20,'.')+\
							ts[0].rjust(20,'.')+ts[1].rjust(20,'.')
					
def timeslice(arglist):
	
	'''
	Make a timeslice of a simulation.
	'''
	
	xtc = True if 'xtc' in arglist else False
	trr = True if 'trr' in arglist else False
	if xtc and trr: raise Exception('except: multiple slice trajectory formats')
	#---get the simulation name
	simname = [i for i in arglist if i in simdict.keys()]
	if len(simname) != 1: raise Exception('except: unclear simulation name')
	else: simname = simname[0]
	#---get the step name
	stepname = [i for i in arglist if i in [j['dir'] for j in simdict[simname]['steps']]]
	if len(stepname) != 1: raise Exception('except: unclear stepname')
	else: stepname = stepname[0]
	#---get the duration and timestep
	timeseg = [i for i in arglist if len(i.split('-')) == 3]
	if len(timeseg) != 1: raise Exception('except: unclear time slice')
	else: timeseg = timeseg[0]	
	make_timeslice(simname,stepname,timeseg,('xtc' if xtc else 'trr'))
	
def arguer(arglist):

	'''
	Custom argument parser for cooperation with makefile-python interface.
	'''

	#---define the arguments expected for each function
	argdict = {
	'avail':['simname','slices'],
		}
	#---return kwargs
	kwargs = dict()
	#---only ordering here is the requirement that the first word is the python function
	func = arglist[0]
	if arglist[0] in argdict.keys():
		#---copy the dictionary for this function so we can iteratively handle each item
		argd = copy.deepcopy(argdict[func])
		#---special keywords are handled below
		if 'simname' in argd:
			simnames = [a for a in arglist[1:] if any([re.match(kn,a) 
				for kn in ['membrane','protein']])]
			argd.pop(argd.index('simname'))
			kwargs['simname'] = simnames
		#---all remaining keywords are handled as flags
		for a in argd:
			kwargs[a] = True if a in arglist[1:] else False
		return kwargs
	#---if no custom argument handling then return none
	else: return None

#---MAIN
#-------------------------------------------------------------------------------------------------------------

if __name__ == "__main__": 
	if len(sys.argv) < 2: print niceblock(helpstring,newlines=True)
	else: 
		argmods = arguer(sys.argv[1:])
		if argmods != None: globals()[sys.argv[1]](**argmods)
		else: globals()[sys.argv[1]](sys.argv[2:])

